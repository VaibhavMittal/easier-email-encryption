#summary Explanation about the code organisation and the logical workflow.
#labels CodeArchitecture,LogicalWorkflow,LibrariesandClasses,DevelopersGuide,Phase-Implementation,Featured

=Software Architecture=
This document might be useful for anyone willing to do some further development on the project or some part of it. It tells how the software code is organized and the logical workflow of the software.
==IDE Specifications==
This prototype was built using Microsoft Visual Studio 2010, Dot NET Framework Version-4.0.3, on a Windows 7 (64-bit) operating system (OS).
The prototype has been successfully tested on Microsoft Outlook 2007 and 2010 on a Windows 7 OS.
==Organization of Code==
This section gives the overview of what is present in the project code and how is it organized.
===Projects, Libraries and Classes===
The following section gives an overview of the various Libraries, Projects and Classes used in the software. It also gives a detailed explanation of some of the important classes.


----

= Logical Workflow =

This document walks you through the flow of the code and gives an overview of what is happening in the background of the GUI.

== A Walkthrough through the Code ==

In this section I will use the software from a user perspective and will keep giving the details of what’s happening in the background (coding perspective).

*USER: User opens Outlook application.*

The add-in is loaded as soon as Outlook Application is started.

The ThisAddin.vb class is initialized and any Startup code is executed (none at present).

=== Encryption Side ===

*USER: A new mail message is composed or a message is forwarded.*

Whenever a message is _composed_ the Encryption Ribbon (EncryptionRibbon.vb) is loaded into the outlook mail composing form, providing a GUI interface in the form of an extra ribbon tab.

[Logical%20Workflow_files/image002.jpg]

_Figure: Encryption Ribbon_

The Encrypt Email ribbon consists of two buttons for different types of security, namely Quick Security and High Security. As of now the High Security button is disabled as its theoretical proposal is still under development.

*USER: Mail message is composed with all the necessary fields entered and files attached.  User clicks the “Quick Security” button in the Encrypt Email tab, to send a secure email.*

When the Quick Security button is clicked (after the message has been composed) it creates a new object of the _EncryptionPasswordDialogBox_ class and saves the reference for future use in a variable named ‘_quickEncryptionPasswordDialogBox__’. _During object creation all the global Variables in the _EncryptionPasswordDialogBox__ _class are initialised, which mainly get and store the relevant details of the current message being encrypted (eg: the recipients, subject etc.). The ‘_currentItem_‘ variable stores the reference to the current mail item being encrypted.

The Encryption Dialog Box is then displayed (it resizes itself dynamically in the load method before displaying).

[Logical%20Workflow_files/image004.jpg]

_Figure: The Encryption Dialog Box_

*USER: User sets a Password and a Hint (optional) and clicks the “Send Encrypted Message” button.*

This is the main part as all the encryption stuff happens here. Important functions are listed below in sequential order:

1)      *Password Validation: *The _isPasswordValid__(__)_ function* c*hecks for a valid password. (Not empty and having a minimum length of 8 characters). Returns ‘True’ if all the required conditions are met.

2)      Progress Bar and label message keeps on getting updated in between several times as the code progresses.

3)      Three custom message headers are added to the message:

a.      X-PBE-Version (with Value: “ECube-1.0”)

b.      X-PBE-Hint (with Value as the text in the HintTextBox)

c.      X-Encryption-Type (with Value: “Quick” or “High”)

4)      The message body (assumed to be all text) is now converted from _String_ to _Byte_ array using the _GetBytes__(__)_ method of the ‘UTF8Encoding’ class. It is necessary to use UTF-8 Encoding not ASCII as the Microsoft Outlook uses UTF-8 Encoding scheme while composing the messages and also while displaying them back to the recipient.

5)      PasswordBasedEncryption Function is called by passing the message body in _Byte(__)_, password as String and KEKEncryption algorithm as Triple-Des CBC (as per standards). The function uses the Bouncy Castle library classes and generates a CMS object (AES-128 encrypted), which is then converted into the ASN.1 encoded data format (with data type as Byte Array). This encoded data is returned by the function. (Basically the message is encrypted and formatted for an email message)

6)      After encrypting the original message body, set the current message body to some constant string value (for now it’s “Instructions…” but maybe you can give a message here saying how to decrypt this encrypted email).

7)      Encrypt the attachment(s) if any and delete all the unencrypted attachment(s). The original attachments are saved in the [TemporaryFolder]/EcubeOriginalAttachments folder on the user’s local hard disk. They are then encrypted (using the same password) and saved in the [TemporaryFolder]/EcubeEncryptedAttachments folder.

8)      Create a file named smime.p7m on user’s local hard disk ([TemporaryFolder]\smime.p7m) and write the encoded message body data (Step 5) into that file.

9)      Attach the smime.p7m file to the current message first (as all attachments from the current message should have been deleted this should be the first attachment). After that attach the encrypted attachment(s).

10)   Send the E-Mail message now to all the recipients.

11)   Clean up all the variable values to ensure data security. Some of them (Global Variables) and the temporary files and folders will be cleared at a later stage.

*USER: After the message is encrypted and being sent in the background, the user selects one of the presented options regarding what to do with the sent message, and clicks the “Done” button.*

While the message is being sent in the background the UserChoicePanel is displayed, which asks the user what to do with the sent message. The three options are:

·        Save the Encrypted message in Sent folder.

·        Save the Decrypted message in Sent folder.

·        Delete the message permanently (to remove complete trace of the message).

The functions of the various options are self explanatory and occur in a separate thread in the background after the message is sent and has been saved in the _Sent_ folder. This is because Outlook stores the message temporarily in the _Outbox_ folder until it sends it, which may require some time (maybe for big attachments or internet connectivity issues). A Timer runs twice every second to ensure the message has been saved in Sent box (using isSentMessageSaved() function) and once it gets a positive signal (True) then it performs the requested user operation. After the operation the form exits.

While the form is being closed all the temporary files and folders are deleted and all the global variables are cleaned up (value is set to “Nothing”).

=== Decryption Side ===

*USER: An encrypted message (with ECube software) is opened by the user.*

Whenever a message is _read_ the Decryption Ribbon (DecryptionRibbon.vb) is loaded into the outlook mail read form, providing a GUI interface in the form of an extra ribbon tab.

[Logical%20Workflow_files/image006.jpg]

_Figure: Decryption Ribbon_

A new instance of the ‘_DecryptionPasswordDialogBox__’ _(with parameter value as “DoubleClick”) is created and displayed in the ‘Load’ event of the decryption ribbon i.e. whenever the user opens a message in a new window, the _DecryptionPasswordDialogBox__ _will_ _be displayed with the message window.

The Decrypt Email ribbon consists of a button for decrypting the current encrypted message. If the email message is not encrypted using the ECube software then the Decryption button will be disabled.

While the _DecryptionPasswordDialogBox__ _is being loaded it_ _retrieves the password Hint from the message header and displays it on the dialog box.

[Logical%20Workflow_files/image008.jpg]

_Figure: The Decryption Dialog Box_

*USER: User enters a password in the form and clicks the _‘’Display Message”_ button*

This is the main part and thus requires a bit of explanation. The background working is explained in the following steps:

1)      Validations:

a.      Check for an empty password field.

b.      Check for correct password: the checkUserPassword() checks for the correct password by trying to decrypt the message body part. If no exception is thrown then the password is assumed to be correct else not. (This is not the perfect way but it works)

2)      After the validation is successful, the message body is decrypted. It is done by saving the smime.p7m file into the [TempDirectory]\EcubeDecryptAttachments\smime.p7m directory on local hard disk. Then the content of the file are read and decrypted using the password entered by the user and the _PasswordBasedDecryption__(__)_ function. Set the decrypted message as the current mail message body.

3)      The encrypted attachments are saved in the [TempDirectory]\EcubeDecryptAttachments\ directory. They are then decrypted and saved in another folder named [TempDirectory]\_EcubeDecrypt*ed*Attachments_\.

4)      All the current attachments in the message are now removed.

5)      The decrypted attachments are then attached to the current message (except for the _smime_ file).

6)      *Clean up*: Delete all the Files and Folders created by this form. Set the values of all the variables to ‘Nothing’ and closes the form.

7)      When user closes the message window then the Outlook automatically asks him whether to save the changes (i.e. decrypted message) or not (leave the message encrypted).

*USER: If the user Right Clicks on a message and selects the Decrypt Message button (instead of opening the message in a separate window).*

In this case again a new instance of the ‘_DecryptionPasswordDialogBox__’ _but with parameter value as “RightClick”. The final decrypted message is displayed in the preview pane of the Outlook Explorer instead of a new window. Rest of the decryption process remains the same as above.

NOTE: This method (Right Click) decrypts the message permanently and does not gives user the option to save it back as an encrypted message.
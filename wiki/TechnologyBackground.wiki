#summary Details of the Technologies and Standards used.
#labels Featured,Phase-Design

= <font color="darkblue" face="book antiqua"> Technology Background </font> =
----
<font size=4> *Contents* </font>

<wiki:toc max_depth="3" />

----
== Introduction ==

Email encryption refers to encryption, and often authentication, of email messages, which can be done to protect the email message data from being read by unintended recipients.

The most popular techniques currently used for email encryption are S/MIME and PGP (Pretty Good Privacy). These are very secure techniques but involve a lot of effort and understanding from the user’s part. Studies have shown that more than 40% of users are unable to use these techniques because of their complex nature [TechnologyBackground#References (Garfinkel, 2005)]. Same problem was observed much earlier in PGP by Whitten and Tygar [TechnologyBackground#References (Whitten, 1999)]. This has created a demand for a similar technique which is easy to use but is still secure.

Our “Easier Email Encryption” proposal is an effort to address all these problems and provide an easy to use, intuitive interface to the user.

In this project I have created a working prototype of the “Easier Email Encryption” technique, in the form of an Outlook Add-in, which demonstrates the above concept and its usability.

== Easier Email Encryption Proposal ==

To tackle the complex problems in email encryption, we have split our solution into two categories:

1)      Quick Security: Password Based Encryption, very easy to use. Security depends upon the strength of the user password.

2)      High Security: Provides high security with authentication. Still under development.

Following sections provide a description of the two techniques. Please note that the High Security technique is still under development and is not yet implemented in the prototype.

=== Quick Security ===

This method provides a way of encrypting email message data (including attachments) using user supplied passwords of any form and length (UTF-8 characters supported).

It is an implementation based on the “Password-based Encryption for CMS” (RFC3211) specification [TechnologyBackground#References (Gutmann, 2001)] which describes a password-based content encryption mechanism for CMS (Cryptographic Message Syntax).

The RFC defines a new ReceipientInfoType as PasswordReceipientInfoType for the CMS which contains various values necessary for password based encryption.

*Encryption Mechanism*

The message data is encrypted using AES-128 bit encryption in CBC mode using Content Encryption Key (CEK).

*CEK Derivation*: The CEK is randomly generated by the program using a pseudo random number generator which takes Salt and Iteration count as the parameters. Salt is an array of bytes in our prototype. The value of number of iterations was carefully chosen from the following table which was obtained by programmatically testing different iteration values and the time taken by them.

|| *Number of iterations* || *Time in milliseconds* || *Time in Seconds* ||
|| 10^3^ || 60 || .06 ||
|| *10^4^* || *229* || *.229* ||
|| 10^5^ || 2129 || 2.129 ||
|| 10^6^ || 21607 || 21.607 ||
|| 10^7^ || Exception Occurred! || Exception Occurred! ||

_Table1: Time taken by various iterations on an i7 processor._

The 10^4 ^value takes about 1/5^th^ of a second which seems a reasonably good time for practical purposes. Hence we chose 10^4 ^iterations for our prototype.

*CEK Encryption*: The CEK is now encrypted using Key Encryption Key (KEK), which is known as _key wrapping_. It happens as follows:

1.      Prepare and format the CEK for encryption.

2.      Encrypt the CEK by Triple-DES encryption in CBC mode using the user supplied _Key_ (Password).

A CMS enveloped data is generated using the password, message data and the above mechanisms, which is then encoded into the ASN.1 format.

The encrypted CEK is now sent along with the encrypted message (ASN.1 encoded data). At the receiver’s end the key unwrapping takes place which is essentially decryption of the CEK using the user supplied password. After unwrapping, the _Key Format_ verification process verifies the integrity of the key. The message is then decrypted using the CEK.

*_NOTE: All the above processes are performed in the prototype using the Bouncy Castle library_*.

In order to satisfy the S/MIME standards as defined in RFC5751 [TechnologyBackground#References (Ramsdell, 2010)] the encoded data is written and attached as a file named _“smime.p7m”_ and is sent to the recipient. The message encoding used is base-64 encoding. Any other attachments are encrypted and a .p7m extension is added at the end of their filename eg: image1.jpg.p7m. At the receiver’s end all the necessary S/MIME header values are displayed as required.

=== High Security ===

This feature allows for Encryption and Authentication of the email, in a user friendly way (without using Certificates).

The main idea is to employ a modification of Diffie-Hellman key exchange algorithm in Email authentication, somewhat similar to the SOKE technique defined in the paper titled “Provably Secure Password-Based Authentication in TLS” [TechnologyBackground#References (Abdalla, et al., 2006)]

The advantages will be complete email security (encryption and authentication), which is easy to use.

The only disadvantage might be that the sender and receiver might need to exchange a couple of messages for one email transfer.

It must however be noted that this proposal is still under development and might undergo significant changes, in which case the above might not hold.

== Comparison of current Email Encryption Techniques & ECube ==

|| *Property* || *S/MIME* || *PGP* || *ECube* ||
|| *Ease of Usability* || Difficult || Difficult || Easier ||
|| *Security* || Encryption and Authentication || Encryption and Authentication || Encryption and Authentication (High Security) ||
|| *Cost* || Certificate Authority’s cost || Certificate Authority’s cost || No running cost (free prototype available) ||
|| *Certificate Required* || Yes || Yes || No ||

MIT researchers made a usability study which suggests how difficult it is to send a secure email with current email encryption techniques like PGP and S/MIME [TechnologyBackground#References (Garfinkel, 2005)]. Their survey suggested some features which most of the user’s wanted to see in a secure email system:

 * Easy to use.

 * User’s wanted to manually control how their email messages are saved (encrypted or decrypted).

 * Ability to decrypt email from any computer.

The Easier Email Encryption (ECube) is designed by keeping all the above factors in mind, which gives a user friendly and a secure email system.

== Prototype Implementation ==

A prototype implementation of the Easier Email Encryption proposal has been created for use as an Outlook Add-in. So far this implementation supports the “Quick Security” feature of the proposal and it gives a feel of how easy it is to send an encrypted email message. For more detailed information on the structure of the software please refer to the [https://code.google.com/p/easier-email-encryption/wiki/CodeArchitecture Code Architecture] page.

Features of ECube-v1.0:

 * Supports password based email encryption (implementation as per the standard).

 * Follows S/MIME standards.

 * Intuitive and user friendly GUI.

 * Support for encryption/decryption of multiple messages at a time.

 * Gives user control over critical decisions, E.g.: storing or deleting an encrypted message etc.

 * Provides assurance to the user about the message security.

 * Well documented with easy to understand Video tutorial.

A Standalone version of the ECube software was also created to assist in reading (decrypting) ECube encrypted email messages, received through email clients other than Outlook or web based email clients eg: Gmail, Thunderbird etc. The current standalone version only supports the decryption of message body not the attachments.

* *

== References ==

1.      Garfinkel, S. L., Margrave, D., Schiller, J. I., Nordlander, E., & Miller, R. C. (2005, April). _How to make secure email easier to use_. In _Proceedings of the SIGCHI conference on Human factors in computing systems_ (pp. 701-710). ACM. Available at: <http://dl.acm.org/citation.cfm?id=1055069>

2.      Abdalla, M., Bresson, E., Chevassut, O., Möller, B., & Pointcheval, D. (2006, March). _Provably secure password-based authentication in TLS_. In _Proceedings of the 2006 ACM Symposium on Information, computer and communications security_ (pp. 35-45). ACM. Available at: <[http://dl.acm.org/citation.cfm?id=1128827  http://dl.acm.org/citation.cfm?id=1128827]>

3.      Whitten, A., & Tygar, J. D. (1999, August). _Why Johnny can’t encrypt: A usability evaluation of PGP 5.0._ In _Proceedings of the 8th USENIX Security Symposium_ (Vol. 99). McGraw-Hill.

4.      Gutmann P. (2001, December). _Password-based Encryption for CMS. _RFC 3211. Available at: <http://tools.ietf.org/html/rfc3211>.

_5.      _Ramsdell B., Turner S. (2010 January). _Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification. _RFC 5751. Available at: <http://tools.ietf.org/html/rfc5751>